#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <stdint.h>
#include <math.h>
#include <pthread.h>
#include <semaphore.h>

#include "leetcode.h"

#define CHECK_VARIABLE(l,r) do{if(0 != r){fprintf(stderr,"[%s], err:[%d]\n",l,r);break;}}while(0);

#define SET_BIT(x, y)  (x |= (1<<y))
#define NEG_BIT(x, y)  (x ^= (1<<y))
#define GET_BIT(x, y)  ((x)>>y & 0x1)

/*
 *  leetcode 114:
 *  Level    : mid
 *  1116. Print Zero Even Odd
 *  realize by state var and semaphore
 */

int             g_iGuide = 0;
sem_t           tSem;
pthread_once_t tOnce = PTHREAD_ONCE_INIT;

void P(sem_t* sem)
{ 
    while (sem_wait(sem) != 0) {}
    return;
}

void V(sem_t *sem)
{ 
    if (sem_post(sem) == -1) {
        fprintf(stderr, "[%s].\n", "sem_post error.");
    }
    return;
}

void printNumber(int x)
{
    printf("%d", x); return;
}
typedef struct {
    int n;
} ZeroEvenOdd;

ZeroEvenOdd* zeroEvenOddCreate(int n) {
    ZeroEvenOdd* obj = (ZeroEvenOdd*) malloc(sizeof(ZeroEvenOdd));
    obj->n = n;
    return obj;
}


void threadOnceInit(){
    int iRet = -1;
    iRet    = sem_init(&tSem, 0, 1);
    if (iRet) printf("sem_init error.\n");
    return;
}

/* do like this 0x000, 0x010, 0x100 */
void zero(ZeroEvenOdd* obj) {   
    int             iRet                = 0;
    int             i                   = 0;
    iRet = pthread_once(&tOnce, threadOnceInit);
    CHECK_VARIABLE("pthread_once error. \n", iRet);
    
    while (1)
    {
        P(&tSem);
        if (GET_BIT(g_iGuide, 0)) {
            V(&tSem);
            continue;
        }

        if (i < obj->n){
            printNumber(0);
        }

        if (!GET_BIT(g_iGuide, 1)){ /* 000 -> 011 */
            SET_BIT(g_iGuide, 1);
        }
        else if (!GET_BIT(g_iGuide, 2)){ /* 010 -> 111 */
            SET_BIT(g_iGuide, 2);
        }
        else
        {
            sprintf(stderr, "[%s]\n", "zero error.");
            return;
        }
        SET_BIT(g_iGuide, 0);
        V(&tSem);

        i = i + 1;
        if (i > obj->n) break;
    }
    
    pthread_exit(NULL);
}

void odd(ZeroEvenOdd* obj) { 
    int             iRet                = 0;
    int             i                   = 1;

    iRet = pthread_once(&tOnce, threadOnceInit);
    CHECK_VARIABLE("pthread_once error. \n", iRet);

    while (1)
    {
        P(&tSem);
        if (!GET_BIT(g_iGuide, 0) || GET_BIT(g_iGuide, 2)) {
            V(&tSem);
            continue;
        }

        if (i <= obj->n * 2)
        {
            printNumber((i + 1) / 2); 
        }
    
        NEG_BIT(g_iGuide, 0); /* TODO: 010 -> 111 */
        V(&tSem);
        i = i + 4;
        if (i > obj->n * 2) break;
    }

    pthread_exit(NULL); 
}


void even(ZeroEvenOdd* obj) {
    int             iRet                = 0;
    int             i                   = 2;

    iRet = pthread_once(&tOnce, threadOnceInit);
    CHECK_VARIABLE("pthread_once error. \n", iRet);

    while (1)
    {
        P(&tSem);
        if (!GET_BIT(g_iGuide, 0) || !GET_BIT(g_iGuide, 2)) {
            V(&tSem);
            continue;
        }

        if (i < obj->n * 2)
        {
            printNumber((i + 2) / 2);
        }
    

        g_iGuide = 0;
        V(&tSem);
        i = i + 4;
        if (i >= obj->n * 2) break;
    }

    pthread_exit(NULL); 
}

void zeroEvenOddFree(ZeroEvenOdd* obj) {
    if (obj) 
    {
        free(obj);
        obj = NULL;
    }
    return; 
}

#define RETURN_IF_ERR(ret) \
    if (0 != ret) {printf("Get errorcode = [%d] line = [%d].\n", ret, __LINE__); return ret;}
int main()
{
    int             iRet            = 0;
    int*            pvRet           = NULL;
    pthread_t       tTid1           = 0;
    pthread_t       tTid2           = 0;
    pthread_t       tTid3           = 0;

    ZeroEvenOdd*    obj             = NULL;

#if 1
    obj = zeroEvenOddCreate(1);
    RETURN_IF_ERR(obj == NULL);

    iRet = pthread_create(&tTid1, NULL, zero, obj);
    iRet = pthread_create(&tTid2, NULL, even, obj);
    iRet = pthread_create(&tTid3, NULL, odd, obj);

    iRet = pthread_join(tTid1, NULL);
    RETURN_IF_ERR(iRet);
    iRet = pthread_join(tTid2, NULL);
    RETURN_IF_ERR(iRet);
    iRet = pthread_join(tTid3, NULL);
    RETURN_IF_ERR(iRet);
#endif
    
#if 0
    obj = zeroEvenOddCreate(10);
    RETURN_IF_ERR(obj == NULL);

    iRet = pthread_create(&tTid3, NULL, odd, obj);
    if (iRet) return iRet;

    iRet = pthread_create(&tTid2, NULL, even, obj);
    if (iRet) return iRet;

    iRet = pthread_create(&tTid1, NULL, zero, obj);
    if (iRet) return iRet;


    iRet = pthread_join(tTid3, NULL);
    RETURN_IF_ERR(iRet);
    iRet = pthread_join(tTid1, NULL);
    RETURN_IF_ERR(iRet);
    iRet = pthread_join(tTid2, NULL);
    RETURN_IF_ERR(iRet);

    zeroEvenOddFree(obj);
#endif
    return iRet;
}
